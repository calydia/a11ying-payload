/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  varchar,
  timestamp,
  jsonb,
  integer,
  boolean,
  numeric,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum__locales = pgEnum('enum__locales', ['en', 'fi'])
export const enum_main_nav_first_level_second_level_third_level_element = pgEnum(
  'enum_main_nav_first_level_second_level_third_level_element',
  ['button', 'link'],
)
export const enum_main_nav_first_level_second_level_element = pgEnum(
  'enum_main_nav_first_level_second_level_element',
  ['button', 'link'],
)
export const enum_main_nav_first_level_element = pgEnum('enum_main_nav_first_level_element', [
  'button',
  'link',
])
export const enum_req_nav_first_level_second_level_third_level_element = pgEnum(
  'enum_req_nav_first_level_second_level_third_level_element',
  ['button', 'link'],
)
export const enum_req_nav_first_level_second_level_element = pgEnum(
  'enum_req_nav_first_level_second_level_element',
  ['button', 'link'],
)
export const enum_req_nav_first_level_element = pgEnum('enum_req_nav_first_level_element', [
  'button',
  'link',
])

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    searchLead: varchar('search_lead'),
    searchContent: varchar('search_content'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
  }),
)

export const pages_locales = pgTable(
  'pages_locales',
  {
    title: varchar('title'),
    slug: varchar('slug'),
    pageUrl: varchar('page_url'),
    lead: jsonb('lead'),
    content: jsonb('content'),
    metaDescription: varchar('meta_description').notNull(),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('pages_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const demopages = pgTable(
  'demopages',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    demopages_updated_at_idx: index('demopages_updated_at_idx').on(columns.updatedAt),
    demopages_created_at_idx: index('demopages_created_at_idx').on(columns.createdAt),
  }),
)

export const demopages_locales = pgTable(
  'demopages_locales',
  {
    title: varchar('title'),
    slug: varchar('slug'),
    pageUrl: varchar('page_url'),
    content: jsonb('content'),
    metaDescription: varchar('meta_description').notNull(),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('demopages_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [demopages.id],
      name: 'demopages_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const glossary_items = pgTable(
  'glossary_items',
  {
    id: serial('id').primaryKey(),
    wcagRelated: boolean('wcag_related').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    glossary_items_updated_at_idx: index('glossary_items_updated_at_idx').on(columns.updatedAt),
    glossary_items_created_at_idx: index('glossary_items_created_at_idx').on(columns.createdAt),
  }),
)

export const glossary_items_locales = pgTable(
  'glossary_items_locales',
  {
    term: varchar('term'),
    termDescription: varchar('term_description'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('glossary_items_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [glossary_items.id],
      name: 'glossary_items_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const req_pages = pgTable(
  'req_pages',
  {
    id: serial('id').primaryKey(),
    searchLead: varchar('search_lead'),
    searchContent: varchar('search_content'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    req_pages_updated_at_idx: index('req_pages_updated_at_idx').on(columns.updatedAt),
    req_pages_created_at_idx: index('req_pages_created_at_idx').on(columns.createdAt),
  }),
)

export const req_pages_locales = pgTable(
  'req_pages_locales',
  {
    title: varchar('title'),
    slug: varchar('slug'),
    pageUrl: varchar('page_url'),
    lead: jsonb('lead'),
    content: jsonb('content'),
    metaDescription: varchar('meta_description').notNull(),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('req_pages_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [req_pages.id],
      name: 'req_pages_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const principles = pgTable(
  'principles',
  {
    id: serial('id').primaryKey(),
    principleNumber: varchar('principle_number'),
    searchContent: varchar('search_content'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    principles_updated_at_idx: index('principles_updated_at_idx').on(columns.updatedAt),
    principles_created_at_idx: index('principles_created_at_idx').on(columns.createdAt),
  }),
)

export const principles_locales = pgTable(
  'principles_locales',
  {
    title: varchar('title'),
    slug: varchar('slug'),
    pageUrl: varchar('page_url'),
    content: jsonb('content'),
    metaDescription: varchar('meta_description').notNull(),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('principles_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [principles.id],
      name: 'principles_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const guidelines = pgTable(
  'guidelines',
  {
    id: serial('id').primaryKey(),
    guidelineNumber: varchar('guideline_number'),
    searchContent: varchar('search_content'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    guidelines_updated_at_idx: index('guidelines_updated_at_idx').on(columns.updatedAt),
    guidelines_created_at_idx: index('guidelines_created_at_idx').on(columns.createdAt),
  }),
)

export const guidelines_locales = pgTable(
  'guidelines_locales',
  {
    title: varchar('title'),
    Principle: integer('principle_id').references(() => principles.id, {
      onDelete: 'set null',
    }),
    slug: varchar('slug'),
    pageUrl: varchar('page_url'),
    content: jsonb('content'),
    metaDescription: varchar('meta_description').notNull(),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    guidelines_principle_idx: index('guidelines_principle_idx').on(
      columns.Principle,
      columns._locale,
    ),
    _localeParent: uniqueIndex('guidelines_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [guidelines.id],
      name: 'guidelines_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const criteria = pgTable(
  'criteria',
  {
    id: serial('id').primaryKey(),
    criterionNumber: varchar('criterion_number'),
    criterionLevel: varchar('criterion_level'),
    wcagVersion: varchar('wcag_version'),
    criterionSort: numeric('criterion_sort'),
    searchContent: varchar('search_content'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    criteria_updated_at_idx: index('criteria_updated_at_idx').on(columns.updatedAt),
    criteria_created_at_idx: index('criteria_created_at_idx').on(columns.createdAt),
  }),
)

export const criteria_locales = pgTable(
  'criteria_locales',
  {
    title: varchar('title'),
    Principle: integer('principle_id').references(() => principles.id, {
      onDelete: 'set null',
    }),
    Guideline: integer('guideline_id').references(() => guidelines.id, {
      onDelete: 'set null',
    }),
    slug: varchar('slug'),
    pageUrl: varchar('page_url'),
    content: jsonb('content'),
    metaDescription: varchar('meta_description').notNull(),
    cardContent: varchar('card_content'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    criteria_principle_idx: index('criteria_principle_idx').on(columns.Principle, columns._locale),
    criteria_guideline_idx: index('criteria_guideline_idx').on(columns.Guideline, columns._locale),
    _localeParent: uniqueIndex('criteria_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [criteria.id],
      name: 'criteria_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const blog_cards = pgTable(
  'blog_cards',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    blog_cards_updated_at_idx: index('blog_cards_updated_at_idx').on(columns.updatedAt),
    blog_cards_created_at_idx: index('blog_cards_created_at_idx').on(columns.createdAt),
  }),
)

export const blog_cards_locales = pgTable(
  'blog_cards_locales',
  {
    title: varchar('title'),
    url: varchar('url'),
    date: timestamp('date', { mode: 'string', withTimezone: true, precision: 3 }),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    blog_cards_image_idx: index('blog_cards_image_idx').on(columns.image, columns._locale),
    _localeParent: uniqueIndex('blog_cards_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [blog_cards.id],
      name: 'blog_cards_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const search = pgTable(
  'search',
  {
    id: serial('id').primaryKey(),
    priority: numeric('priority'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_updated_at_idx: index('search_updated_at_idx').on(columns.updatedAt),
    search_created_at_idx: index('search_created_at_idx').on(columns.createdAt),
  }),
)

export const search_locales = pgTable(
  'search_locales',
  {
    title: varchar('title'),
    searchContent: varchar('search_content'),
    searchLead: varchar('search_lead'),
    searchPageUrl: varchar('search_page_url'),
    searchDescription: varchar('search_description'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('search_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search_rels = pgTable(
  'search_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    demopagesID: integer('demopages_id'),
    reqPagesID: integer('req_pages_id'),
    principlesID: integer('principles_id'),
    guidelinesID: integer('guidelines_id'),
    criteriaID: integer('criteria_id'),
  },
  (columns) => ({
    order: index('search_rels_order_idx').on(columns.order),
    parentIdx: index('search_rels_parent_idx').on(columns.parent),
    pathIdx: index('search_rels_path_idx').on(columns.path),
    search_rels_pages_id_idx: index('search_rels_pages_id_idx').on(columns.pagesID),
    search_rels_demopages_id_idx: index('search_rels_demopages_id_idx').on(columns.demopagesID),
    search_rels_req_pages_id_idx: index('search_rels_req_pages_id_idx').on(columns.reqPagesID),
    search_rels_principles_id_idx: index('search_rels_principles_id_idx').on(columns.principlesID),
    search_rels_guidelines_id_idx: index('search_rels_guidelines_id_idx').on(columns.guidelinesID),
    search_rels_criteria_id_idx: index('search_rels_criteria_id_idx').on(columns.criteriaID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [search.id],
      name: 'search_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'search_rels_pages_fk',
    }).onDelete('cascade'),
    demopagesIdFk: foreignKey({
      columns: [columns['demopagesID']],
      foreignColumns: [demopages.id],
      name: 'search_rels_demopages_fk',
    }).onDelete('cascade'),
    reqPagesIdFk: foreignKey({
      columns: [columns['reqPagesID']],
      foreignColumns: [req_pages.id],
      name: 'search_rels_req_pages_fk',
    }).onDelete('cascade'),
    principlesIdFk: foreignKey({
      columns: [columns['principlesID']],
      foreignColumns: [principles.id],
      name: 'search_rels_principles_fk',
    }).onDelete('cascade'),
    guidelinesIdFk: foreignKey({
      columns: [columns['guidelinesID']],
      foreignColumns: [guidelines.id],
      name: 'search_rels_guidelines_fk',
    }).onDelete('cascade'),
    criteriaIdFk: foreignKey({
      columns: [columns['criteriaID']],
      foreignColumns: [criteria.id],
      name: 'search_rels_criteria_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    demopagesID: integer('demopages_id'),
    glossaryItemsID: integer('glossary_items_id'),
    reqPagesID: integer('req_pages_id'),
    principlesID: integer('principles_id'),
    guidelinesID: integer('guidelines_id'),
    criteriaID: integer('criteria_id'),
    blogCardsID: integer('blog_cards_id'),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    searchID: integer('search_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_demopages_id_idx: index(
      'payload_locked_documents_rels_demopages_id_idx',
    ).on(columns.demopagesID),
    payload_locked_documents_rels_glossary_items_id_idx: index(
      'payload_locked_documents_rels_glossary_items_id_idx',
    ).on(columns.glossaryItemsID),
    payload_locked_documents_rels_req_pages_id_idx: index(
      'payload_locked_documents_rels_req_pages_id_idx',
    ).on(columns.reqPagesID),
    payload_locked_documents_rels_principles_id_idx: index(
      'payload_locked_documents_rels_principles_id_idx',
    ).on(columns.principlesID),
    payload_locked_documents_rels_guidelines_id_idx: index(
      'payload_locked_documents_rels_guidelines_id_idx',
    ).on(columns.guidelinesID),
    payload_locked_documents_rels_criteria_id_idx: index(
      'payload_locked_documents_rels_criteria_id_idx',
    ).on(columns.criteriaID),
    payload_locked_documents_rels_blog_cards_id_idx: index(
      'payload_locked_documents_rels_blog_cards_id_idx',
    ).on(columns.blogCardsID),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_search_id_idx: index(
      'payload_locked_documents_rels_search_id_idx',
    ).on(columns.searchID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    demopagesIdFk: foreignKey({
      columns: [columns['demopagesID']],
      foreignColumns: [demopages.id],
      name: 'payload_locked_documents_rels_demopages_fk',
    }).onDelete('cascade'),
    glossaryItemsIdFk: foreignKey({
      columns: [columns['glossaryItemsID']],
      foreignColumns: [glossary_items.id],
      name: 'payload_locked_documents_rels_glossary_items_fk',
    }).onDelete('cascade'),
    reqPagesIdFk: foreignKey({
      columns: [columns['reqPagesID']],
      foreignColumns: [req_pages.id],
      name: 'payload_locked_documents_rels_req_pages_fk',
    }).onDelete('cascade'),
    principlesIdFk: foreignKey({
      columns: [columns['principlesID']],
      foreignColumns: [principles.id],
      name: 'payload_locked_documents_rels_principles_fk',
    }).onDelete('cascade'),
    guidelinesIdFk: foreignKey({
      columns: [columns['guidelinesID']],
      foreignColumns: [guidelines.id],
      name: 'payload_locked_documents_rels_guidelines_fk',
    }).onDelete('cascade'),
    criteriaIdFk: foreignKey({
      columns: [columns['criteriaID']],
      foreignColumns: [criteria.id],
      name: 'payload_locked_documents_rels_criteria_fk',
    }).onDelete('cascade'),
    blogCardsIdFk: foreignKey({
      columns: [columns['blogCardsID']],
      foreignColumns: [blog_cards.id],
      name: 'payload_locked_documents_rels_blog_cards_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    searchIdFk: foreignKey({
      columns: [columns['searchID']],
      foreignColumns: [search.id],
      name: 'payload_locked_documents_rels_search_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const main_nav_first_level_second_level_third_level = pgTable(
  'main_nav_first_level_second_level_third_level',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    element: enum_main_nav_first_level_second_level_third_level_element('element'),
    iconClass: varchar('icon_class'),
  },
  (columns) => ({
    _orderIdx: index('main_nav_first_level_second_level_third_level_order_idx').on(columns._order),
    _parentIDIdx: index('main_nav_first_level_second_level_third_level_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [main_nav_first_level_second_level.id],
      name: 'main_nav_first_level_second_level_third_level_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const main_nav_first_level_second_level_third_level_locales = pgTable(
  'main_nav_first_level_second_level_third_level_locales',
  {
    button: varchar('button'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      'main_nav_first_level_second_level_third_level_locales_locale_parent_id_unique',
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [main_nav_first_level_second_level_third_level.id],
      name: 'main_nav_first_level_second_level_third_level_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const main_nav_first_level_second_level = pgTable(
  'main_nav_first_level_second_level',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    element: enum_main_nav_first_level_second_level_element('element'),
    iconClass: varchar('icon_class'),
  },
  (columns) => ({
    _orderIdx: index('main_nav_first_level_second_level_order_idx').on(columns._order),
    _parentIDIdx: index('main_nav_first_level_second_level_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [main_nav_first_level.id],
      name: 'main_nav_first_level_second_level_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const main_nav_first_level_second_level_locales = pgTable(
  'main_nav_first_level_second_level_locales',
  {
    button: varchar('button'),
    menuPath: varchar('menu_path'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      'main_nav_first_level_second_level_locales_locale_parent_id_unique',
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [main_nav_first_level_second_level.id],
      name: 'main_nav_first_level_second_level_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const main_nav_first_level = pgTable(
  'main_nav_first_level',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    element: enum_main_nav_first_level_element('element'),
    iconClass: varchar('icon_class'),
  },
  (columns) => ({
    _orderIdx: index('main_nav_first_level_order_idx').on(columns._order),
    _parentIDIdx: index('main_nav_first_level_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [main_nav.id],
      name: 'main_nav_first_level_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const main_nav_first_level_locales = pgTable(
  'main_nav_first_level_locales',
  {
    mainPath: varchar('main_path').notNull(),
    button: varchar('button'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('main_nav_first_level_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [main_nav_first_level.id],
      name: 'main_nav_first_level_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const main_nav = pgTable('main_nav', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const main_nav_rels = pgTable(
  'main_nav_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    demopagesID: integer('demopages_id'),
  },
  (columns) => ({
    order: index('main_nav_rels_order_idx').on(columns.order),
    parentIdx: index('main_nav_rels_parent_idx').on(columns.parent),
    pathIdx: index('main_nav_rels_path_idx').on(columns.path),
    main_nav_rels_pages_id_idx: index('main_nav_rels_pages_id_idx').on(columns.pagesID),
    main_nav_rels_demopages_id_idx: index('main_nav_rels_demopages_id_idx').on(columns.demopagesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [main_nav.id],
      name: 'main_nav_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'main_nav_rels_pages_fk',
    }).onDelete('cascade'),
    demopagesIdFk: foreignKey({
      columns: [columns['demopagesID']],
      foreignColumns: [demopages.id],
      name: 'main_nav_rels_demopages_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_nav_navigation_links = pgTable(
  'footer_nav_navigation_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    iconClass: varchar('icon_class'),
    menuLink: integer('menu_link_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('footer_nav_navigation_links_order_idx').on(columns._order),
    _parentIDIdx: index('footer_nav_navigation_links_parent_id_idx').on(columns._parentID),
    footer_nav_navigation_links_menu_link_idx: index(
      'footer_nav_navigation_links_menu_link_idx',
    ).on(columns.menuLink),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer_nav.id],
      name: 'footer_nav_navigation_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_nav = pgTable('footer_nav', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const front_page = pgTable('front_page', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const front_page_locales = pgTable(
  'front_page_locales',
  {
    title: varchar('title').notNull(),
    content: jsonb('content'),
    metaDescription: varchar('meta_description').notNull(),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('front_page_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [front_page.id],
      name: 'front_page_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const req_nav_first_level_second_level_third_level = pgTable(
  'req_nav_first_level_second_level_third_level',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    element: enum_req_nav_first_level_second_level_third_level_element('element'),
    iconClass: varchar('icon_class'),
  },
  (columns) => ({
    _orderIdx: index('req_nav_first_level_second_level_third_level_order_idx').on(columns._order),
    _parentIDIdx: index('req_nav_first_level_second_level_third_level_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [req_nav_first_level_second_level.id],
      name: 'req_nav_first_level_second_level_third_level_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const req_nav_first_level_second_level_third_level_locales = pgTable(
  'req_nav_first_level_second_level_third_level_locales',
  {
    button: varchar('button'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      'req_nav_first_level_second_level_third_level_locales_locale_parent_id_unique',
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [req_nav_first_level_second_level_third_level.id],
      name: 'req_nav_first_level_second_level_third_level_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const req_nav_first_level_second_level = pgTable(
  'req_nav_first_level_second_level',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    element: enum_req_nav_first_level_second_level_element('element'),
    iconClass: varchar('icon_class'),
  },
  (columns) => ({
    _orderIdx: index('req_nav_first_level_second_level_order_idx').on(columns._order),
    _parentIDIdx: index('req_nav_first_level_second_level_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [req_nav_first_level.id],
      name: 'req_nav_first_level_second_level_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const req_nav_first_level_second_level_locales = pgTable(
  'req_nav_first_level_second_level_locales',
  {
    button: varchar('button'),
    menuPath: varchar('menu_path'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      'req_nav_first_level_second_level_locales_locale_parent_id_unique',
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [req_nav_first_level_second_level.id],
      name: 'req_nav_first_level_second_level_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const req_nav_first_level = pgTable(
  'req_nav_first_level',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    element: enum_req_nav_first_level_element('element'),
    iconClass: varchar('icon_class'),
  },
  (columns) => ({
    _orderIdx: index('req_nav_first_level_order_idx').on(columns._order),
    _parentIDIdx: index('req_nav_first_level_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [req_nav.id],
      name: 'req_nav_first_level_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const req_nav_first_level_locales = pgTable(
  'req_nav_first_level_locales',
  {
    mainPath: varchar('main_path'),
    button: varchar('button'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('req_nav_first_level_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [req_nav_first_level.id],
      name: 'req_nav_first_level_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const req_nav = pgTable('req_nav', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const req_nav_rels = pgTable(
  'req_nav_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    reqPagesID: integer('req_pages_id'),
    principlesID: integer('principles_id'),
    guidelinesID: integer('guidelines_id'),
    criteriaID: integer('criteria_id'),
  },
  (columns) => ({
    order: index('req_nav_rels_order_idx').on(columns.order),
    parentIdx: index('req_nav_rels_parent_idx').on(columns.parent),
    pathIdx: index('req_nav_rels_path_idx').on(columns.path),
    req_nav_rels_req_pages_id_idx: index('req_nav_rels_req_pages_id_idx').on(columns.reqPagesID),
    req_nav_rels_principles_id_idx: index('req_nav_rels_principles_id_idx').on(
      columns.principlesID,
    ),
    req_nav_rels_guidelines_id_idx: index('req_nav_rels_guidelines_id_idx').on(
      columns.guidelinesID,
    ),
    req_nav_rels_criteria_id_idx: index('req_nav_rels_criteria_id_idx').on(columns.criteriaID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [req_nav.id],
      name: 'req_nav_rels_parent_fk',
    }).onDelete('cascade'),
    reqPagesIdFk: foreignKey({
      columns: [columns['reqPagesID']],
      foreignColumns: [req_pages.id],
      name: 'req_nav_rels_req_pages_fk',
    }).onDelete('cascade'),
    principlesIdFk: foreignKey({
      columns: [columns['principlesID']],
      foreignColumns: [principles.id],
      name: 'req_nav_rels_principles_fk',
    }).onDelete('cascade'),
    guidelinesIdFk: foreignKey({
      columns: [columns['guidelinesID']],
      foreignColumns: [guidelines.id],
      name: 'req_nav_rels_guidelines_fk',
    }).onDelete('cascade'),
    criteriaIdFk: foreignKey({
      columns: [columns['criteriaID']],
      foreignColumns: [criteria.id],
      name: 'req_nav_rels_criteria_fk',
    }).onDelete('cascade'),
  }),
)

export const req_footer_nav_navigation_links = pgTable(
  'req_footer_nav_navigation_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    iconClass: varchar('icon_class'),
    menuLink: integer('menu_link_id').references(() => req_pages.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('req_footer_nav_navigation_links_order_idx').on(columns._order),
    _parentIDIdx: index('req_footer_nav_navigation_links_parent_id_idx').on(columns._parentID),
    req_footer_nav_navigation_links_menu_link_idx: index(
      'req_footer_nav_navigation_links_menu_link_idx',
    ).on(columns.menuLink),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [req_footer_nav.id],
      name: 'req_footer_nav_navigation_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const req_footer_nav = pgTable('req_footer_nav', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const menu_titles = pgTable('menu_titles', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const menu_titles_locales = pgTable(
  'menu_titles_locales',
  {
    list: jsonb('list').notNull(),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('menu_titles_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [menu_titles.id],
      name: 'menu_titles_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const not_found = pgTable('not_found', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const not_found_locales = pgTable(
  'not_found_locales',
  {
    title: varchar('title').notNull(),
    content: jsonb('content'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('not_found_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [not_found.id],
      name: 'not_found_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const req_front_page = pgTable('req_front_page', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const req_front_page_locales = pgTable(
  'req_front_page_locales',
  {
    title: varchar('title').notNull(),
    content: jsonb('content'),
    metaDescription: varchar('meta_description').notNull(),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('req_front_page_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [req_front_page.id],
      name: 'req_front_page_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const relations_pages_locales = relations(pages_locales, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_locales._parentID],
    references: [pages.id],
    relationName: '_locales',
  }),
}))
export const relations_pages = relations(pages, ({ many }) => ({
  _locales: many(pages_locales, {
    relationName: '_locales',
  }),
}))
export const relations_demopages_locales = relations(demopages_locales, ({ one }) => ({
  _parentID: one(demopages, {
    fields: [demopages_locales._parentID],
    references: [demopages.id],
    relationName: '_locales',
  }),
}))
export const relations_demopages = relations(demopages, ({ many }) => ({
  _locales: many(demopages_locales, {
    relationName: '_locales',
  }),
}))
export const relations_glossary_items_locales = relations(glossary_items_locales, ({ one }) => ({
  _parentID: one(glossary_items, {
    fields: [glossary_items_locales._parentID],
    references: [glossary_items.id],
    relationName: '_locales',
  }),
}))
export const relations_glossary_items = relations(glossary_items, ({ many }) => ({
  _locales: many(glossary_items_locales, {
    relationName: '_locales',
  }),
}))
export const relations_req_pages_locales = relations(req_pages_locales, ({ one }) => ({
  _parentID: one(req_pages, {
    fields: [req_pages_locales._parentID],
    references: [req_pages.id],
    relationName: '_locales',
  }),
}))
export const relations_req_pages = relations(req_pages, ({ many }) => ({
  _locales: many(req_pages_locales, {
    relationName: '_locales',
  }),
}))
export const relations_principles_locales = relations(principles_locales, ({ one }) => ({
  _parentID: one(principles, {
    fields: [principles_locales._parentID],
    references: [principles.id],
    relationName: '_locales',
  }),
}))
export const relations_principles = relations(principles, ({ many }) => ({
  _locales: many(principles_locales, {
    relationName: '_locales',
  }),
}))
export const relations_guidelines_locales = relations(guidelines_locales, ({ one }) => ({
  _parentID: one(guidelines, {
    fields: [guidelines_locales._parentID],
    references: [guidelines.id],
    relationName: '_locales',
  }),
  Principle: one(principles, {
    fields: [guidelines_locales.Principle],
    references: [principles.id],
    relationName: 'Principle',
  }),
}))
export const relations_guidelines = relations(guidelines, ({ many }) => ({
  _locales: many(guidelines_locales, {
    relationName: '_locales',
  }),
}))
export const relations_criteria_locales = relations(criteria_locales, ({ one }) => ({
  _parentID: one(criteria, {
    fields: [criteria_locales._parentID],
    references: [criteria.id],
    relationName: '_locales',
  }),
  Principle: one(principles, {
    fields: [criteria_locales.Principle],
    references: [principles.id],
    relationName: 'Principle',
  }),
  Guideline: one(guidelines, {
    fields: [criteria_locales.Guideline],
    references: [guidelines.id],
    relationName: 'Guideline',
  }),
}))
export const relations_criteria = relations(criteria, ({ many }) => ({
  _locales: many(criteria_locales, {
    relationName: '_locales',
  }),
}))
export const relations_blog_cards_locales = relations(blog_cards_locales, ({ one }) => ({
  _parentID: one(blog_cards, {
    fields: [blog_cards_locales._parentID],
    references: [blog_cards.id],
    relationName: '_locales',
  }),
  image: one(media, {
    fields: [blog_cards_locales.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_blog_cards = relations(blog_cards, ({ many }) => ({
  _locales: many(blog_cards_locales, {
    relationName: '_locales',
  }),
}))
export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_search_locales = relations(search_locales, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_locales._parentID],
    references: [search.id],
    relationName: '_locales',
  }),
}))
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [search_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  demopagesID: one(demopages, {
    fields: [search_rels.demopagesID],
    references: [demopages.id],
    relationName: 'demopages',
  }),
  reqPagesID: one(req_pages, {
    fields: [search_rels.reqPagesID],
    references: [req_pages.id],
    relationName: 'reqPages',
  }),
  principlesID: one(principles, {
    fields: [search_rels.principlesID],
    references: [principles.id],
    relationName: 'principles',
  }),
  guidelinesID: one(guidelines, {
    fields: [search_rels.guidelinesID],
    references: [guidelines.id],
    relationName: 'guidelines',
  }),
  criteriaID: one(criteria, {
    fields: [search_rels.criteriaID],
    references: [criteria.id],
    relationName: 'criteria',
  }),
}))
export const relations_search = relations(search, ({ many }) => ({
  _locales: many(search_locales, {
    relationName: '_locales',
  }),
  _rels: many(search_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    demopagesID: one(demopages, {
      fields: [payload_locked_documents_rels.demopagesID],
      references: [demopages.id],
      relationName: 'demopages',
    }),
    glossaryItemsID: one(glossary_items, {
      fields: [payload_locked_documents_rels.glossaryItemsID],
      references: [glossary_items.id],
      relationName: 'glossaryItems',
    }),
    reqPagesID: one(req_pages, {
      fields: [payload_locked_documents_rels.reqPagesID],
      references: [req_pages.id],
      relationName: 'reqPages',
    }),
    principlesID: one(principles, {
      fields: [payload_locked_documents_rels.principlesID],
      references: [principles.id],
      relationName: 'principles',
    }),
    guidelinesID: one(guidelines, {
      fields: [payload_locked_documents_rels.guidelinesID],
      references: [guidelines.id],
      relationName: 'guidelines',
    }),
    criteriaID: one(criteria, {
      fields: [payload_locked_documents_rels.criteriaID],
      references: [criteria.id],
      relationName: 'criteria',
    }),
    blogCardsID: one(blog_cards, {
      fields: [payload_locked_documents_rels.blogCardsID],
      references: [blog_cards.id],
      relationName: 'blogCards',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: 'search',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_main_nav_first_level_second_level_third_level_locales = relations(
  main_nav_first_level_second_level_third_level_locales,
  ({ one }) => ({
    _parentID: one(main_nav_first_level_second_level_third_level, {
      fields: [main_nav_first_level_second_level_third_level_locales._parentID],
      references: [main_nav_first_level_second_level_third_level.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_main_nav_first_level_second_level_third_level = relations(
  main_nav_first_level_second_level_third_level,
  ({ one, many }) => ({
    _parentID: one(main_nav_first_level_second_level, {
      fields: [main_nav_first_level_second_level_third_level._parentID],
      references: [main_nav_first_level_second_level.id],
      relationName: 'thirdLevel',
    }),
    _locales: many(main_nav_first_level_second_level_third_level_locales, {
      relationName: '_locales',
    }),
  }),
)
export const relations_main_nav_first_level_second_level_locales = relations(
  main_nav_first_level_second_level_locales,
  ({ one }) => ({
    _parentID: one(main_nav_first_level_second_level, {
      fields: [main_nav_first_level_second_level_locales._parentID],
      references: [main_nav_first_level_second_level.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_main_nav_first_level_second_level = relations(
  main_nav_first_level_second_level,
  ({ one, many }) => ({
    _parentID: one(main_nav_first_level, {
      fields: [main_nav_first_level_second_level._parentID],
      references: [main_nav_first_level.id],
      relationName: 'secondLevel',
    }),
    _locales: many(main_nav_first_level_second_level_locales, {
      relationName: '_locales',
    }),
    thirdLevel: many(main_nav_first_level_second_level_third_level, {
      relationName: 'thirdLevel',
    }),
  }),
)
export const relations_main_nav_first_level_locales = relations(
  main_nav_first_level_locales,
  ({ one }) => ({
    _parentID: one(main_nav_first_level, {
      fields: [main_nav_first_level_locales._parentID],
      references: [main_nav_first_level.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_main_nav_first_level = relations(main_nav_first_level, ({ one, many }) => ({
  _parentID: one(main_nav, {
    fields: [main_nav_first_level._parentID],
    references: [main_nav.id],
    relationName: 'firstLevel',
  }),
  _locales: many(main_nav_first_level_locales, {
    relationName: '_locales',
  }),
  secondLevel: many(main_nav_first_level_second_level, {
    relationName: 'secondLevel',
  }),
}))
export const relations_main_nav_rels = relations(main_nav_rels, ({ one }) => ({
  parent: one(main_nav, {
    fields: [main_nav_rels.parent],
    references: [main_nav.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [main_nav_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  demopagesID: one(demopages, {
    fields: [main_nav_rels.demopagesID],
    references: [demopages.id],
    relationName: 'demopages',
  }),
}))
export const relations_main_nav = relations(main_nav, ({ many }) => ({
  firstLevel: many(main_nav_first_level, {
    relationName: 'firstLevel',
  }),
  _rels: many(main_nav_rels, {
    relationName: '_rels',
  }),
}))
export const relations_footer_nav_navigation_links = relations(
  footer_nav_navigation_links,
  ({ one }) => ({
    _parentID: one(footer_nav, {
      fields: [footer_nav_navigation_links._parentID],
      references: [footer_nav.id],
      relationName: 'navigationLinks',
    }),
    menuLink: one(pages, {
      fields: [footer_nav_navigation_links.menuLink],
      references: [pages.id],
      relationName: 'menuLink',
    }),
  }),
)
export const relations_footer_nav = relations(footer_nav, ({ many }) => ({
  navigationLinks: many(footer_nav_navigation_links, {
    relationName: 'navigationLinks',
  }),
}))
export const relations_front_page_locales = relations(front_page_locales, ({ one }) => ({
  _parentID: one(front_page, {
    fields: [front_page_locales._parentID],
    references: [front_page.id],
    relationName: '_locales',
  }),
}))
export const relations_front_page = relations(front_page, ({ many }) => ({
  _locales: many(front_page_locales, {
    relationName: '_locales',
  }),
}))
export const relations_req_nav_first_level_second_level_third_level_locales = relations(
  req_nav_first_level_second_level_third_level_locales,
  ({ one }) => ({
    _parentID: one(req_nav_first_level_second_level_third_level, {
      fields: [req_nav_first_level_second_level_third_level_locales._parentID],
      references: [req_nav_first_level_second_level_third_level.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_req_nav_first_level_second_level_third_level = relations(
  req_nav_first_level_second_level_third_level,
  ({ one, many }) => ({
    _parentID: one(req_nav_first_level_second_level, {
      fields: [req_nav_first_level_second_level_third_level._parentID],
      references: [req_nav_first_level_second_level.id],
      relationName: 'thirdLevel',
    }),
    _locales: many(req_nav_first_level_second_level_third_level_locales, {
      relationName: '_locales',
    }),
  }),
)
export const relations_req_nav_first_level_second_level_locales = relations(
  req_nav_first_level_second_level_locales,
  ({ one }) => ({
    _parentID: one(req_nav_first_level_second_level, {
      fields: [req_nav_first_level_second_level_locales._parentID],
      references: [req_nav_first_level_second_level.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_req_nav_first_level_second_level = relations(
  req_nav_first_level_second_level,
  ({ one, many }) => ({
    _parentID: one(req_nav_first_level, {
      fields: [req_nav_first_level_second_level._parentID],
      references: [req_nav_first_level.id],
      relationName: 'secondLevel',
    }),
    _locales: many(req_nav_first_level_second_level_locales, {
      relationName: '_locales',
    }),
    thirdLevel: many(req_nav_first_level_second_level_third_level, {
      relationName: 'thirdLevel',
    }),
  }),
)
export const relations_req_nav_first_level_locales = relations(
  req_nav_first_level_locales,
  ({ one }) => ({
    _parentID: one(req_nav_first_level, {
      fields: [req_nav_first_level_locales._parentID],
      references: [req_nav_first_level.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_req_nav_first_level = relations(req_nav_first_level, ({ one, many }) => ({
  _parentID: one(req_nav, {
    fields: [req_nav_first_level._parentID],
    references: [req_nav.id],
    relationName: 'firstLevel',
  }),
  _locales: many(req_nav_first_level_locales, {
    relationName: '_locales',
  }),
  secondLevel: many(req_nav_first_level_second_level, {
    relationName: 'secondLevel',
  }),
}))
export const relations_req_nav_rels = relations(req_nav_rels, ({ one }) => ({
  parent: one(req_nav, {
    fields: [req_nav_rels.parent],
    references: [req_nav.id],
    relationName: '_rels',
  }),
  reqPagesID: one(req_pages, {
    fields: [req_nav_rels.reqPagesID],
    references: [req_pages.id],
    relationName: 'reqPages',
  }),
  principlesID: one(principles, {
    fields: [req_nav_rels.principlesID],
    references: [principles.id],
    relationName: 'principles',
  }),
  guidelinesID: one(guidelines, {
    fields: [req_nav_rels.guidelinesID],
    references: [guidelines.id],
    relationName: 'guidelines',
  }),
  criteriaID: one(criteria, {
    fields: [req_nav_rels.criteriaID],
    references: [criteria.id],
    relationName: 'criteria',
  }),
}))
export const relations_req_nav = relations(req_nav, ({ many }) => ({
  firstLevel: many(req_nav_first_level, {
    relationName: 'firstLevel',
  }),
  _rels: many(req_nav_rels, {
    relationName: '_rels',
  }),
}))
export const relations_req_footer_nav_navigation_links = relations(
  req_footer_nav_navigation_links,
  ({ one }) => ({
    _parentID: one(req_footer_nav, {
      fields: [req_footer_nav_navigation_links._parentID],
      references: [req_footer_nav.id],
      relationName: 'navigationLinks',
    }),
    menuLink: one(req_pages, {
      fields: [req_footer_nav_navigation_links.menuLink],
      references: [req_pages.id],
      relationName: 'menuLink',
    }),
  }),
)
export const relations_req_footer_nav = relations(req_footer_nav, ({ many }) => ({
  navigationLinks: many(req_footer_nav_navigation_links, {
    relationName: 'navigationLinks',
  }),
}))
export const relations_menu_titles_locales = relations(menu_titles_locales, ({ one }) => ({
  _parentID: one(menu_titles, {
    fields: [menu_titles_locales._parentID],
    references: [menu_titles.id],
    relationName: '_locales',
  }),
}))
export const relations_menu_titles = relations(menu_titles, ({ many }) => ({
  _locales: many(menu_titles_locales, {
    relationName: '_locales',
  }),
}))
export const relations_not_found_locales = relations(not_found_locales, ({ one }) => ({
  _parentID: one(not_found, {
    fields: [not_found_locales._parentID],
    references: [not_found.id],
    relationName: '_locales',
  }),
}))
export const relations_not_found = relations(not_found, ({ many }) => ({
  _locales: many(not_found_locales, {
    relationName: '_locales',
  }),
}))
export const relations_req_front_page_locales = relations(req_front_page_locales, ({ one }) => ({
  _parentID: one(req_front_page, {
    fields: [req_front_page_locales._parentID],
    references: [req_front_page.id],
    relationName: '_locales',
  }),
}))
export const relations_req_front_page = relations(req_front_page, ({ many }) => ({
  _locales: many(req_front_page_locales, {
    relationName: '_locales',
  }),
}))

type DatabaseSchema = {
  enum__locales: typeof enum__locales
  enum_main_nav_first_level_second_level_third_level_element: typeof enum_main_nav_first_level_second_level_third_level_element
  enum_main_nav_first_level_second_level_element: typeof enum_main_nav_first_level_second_level_element
  enum_main_nav_first_level_element: typeof enum_main_nav_first_level_element
  enum_req_nav_first_level_second_level_third_level_element: typeof enum_req_nav_first_level_second_level_third_level_element
  enum_req_nav_first_level_second_level_element: typeof enum_req_nav_first_level_second_level_element
  enum_req_nav_first_level_element: typeof enum_req_nav_first_level_element
  pages: typeof pages
  pages_locales: typeof pages_locales
  demopages: typeof demopages
  demopages_locales: typeof demopages_locales
  glossary_items: typeof glossary_items
  glossary_items_locales: typeof glossary_items_locales
  req_pages: typeof req_pages
  req_pages_locales: typeof req_pages_locales
  principles: typeof principles
  principles_locales: typeof principles_locales
  guidelines: typeof guidelines
  guidelines_locales: typeof guidelines_locales
  criteria: typeof criteria
  criteria_locales: typeof criteria_locales
  blog_cards: typeof blog_cards
  blog_cards_locales: typeof blog_cards_locales
  users_sessions: typeof users_sessions
  users: typeof users
  media: typeof media
  search: typeof search
  search_locales: typeof search_locales
  search_rels: typeof search_rels
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  main_nav_first_level_second_level_third_level: typeof main_nav_first_level_second_level_third_level
  main_nav_first_level_second_level_third_level_locales: typeof main_nav_first_level_second_level_third_level_locales
  main_nav_first_level_second_level: typeof main_nav_first_level_second_level
  main_nav_first_level_second_level_locales: typeof main_nav_first_level_second_level_locales
  main_nav_first_level: typeof main_nav_first_level
  main_nav_first_level_locales: typeof main_nav_first_level_locales
  main_nav: typeof main_nav
  main_nav_rels: typeof main_nav_rels
  footer_nav_navigation_links: typeof footer_nav_navigation_links
  footer_nav: typeof footer_nav
  front_page: typeof front_page
  front_page_locales: typeof front_page_locales
  req_nav_first_level_second_level_third_level: typeof req_nav_first_level_second_level_third_level
  req_nav_first_level_second_level_third_level_locales: typeof req_nav_first_level_second_level_third_level_locales
  req_nav_first_level_second_level: typeof req_nav_first_level_second_level
  req_nav_first_level_second_level_locales: typeof req_nav_first_level_second_level_locales
  req_nav_first_level: typeof req_nav_first_level
  req_nav_first_level_locales: typeof req_nav_first_level_locales
  req_nav: typeof req_nav
  req_nav_rels: typeof req_nav_rels
  req_footer_nav_navigation_links: typeof req_footer_nav_navigation_links
  req_footer_nav: typeof req_footer_nav
  menu_titles: typeof menu_titles
  menu_titles_locales: typeof menu_titles_locales
  not_found: typeof not_found
  not_found_locales: typeof not_found_locales
  req_front_page: typeof req_front_page
  req_front_page_locales: typeof req_front_page_locales
  relations_pages_locales: typeof relations_pages_locales
  relations_pages: typeof relations_pages
  relations_demopages_locales: typeof relations_demopages_locales
  relations_demopages: typeof relations_demopages
  relations_glossary_items_locales: typeof relations_glossary_items_locales
  relations_glossary_items: typeof relations_glossary_items
  relations_req_pages_locales: typeof relations_req_pages_locales
  relations_req_pages: typeof relations_req_pages
  relations_principles_locales: typeof relations_principles_locales
  relations_principles: typeof relations_principles
  relations_guidelines_locales: typeof relations_guidelines_locales
  relations_guidelines: typeof relations_guidelines
  relations_criteria_locales: typeof relations_criteria_locales
  relations_criteria: typeof relations_criteria
  relations_blog_cards_locales: typeof relations_blog_cards_locales
  relations_blog_cards: typeof relations_blog_cards
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_search_locales: typeof relations_search_locales
  relations_search_rels: typeof relations_search_rels
  relations_search: typeof relations_search
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_main_nav_first_level_second_level_third_level_locales: typeof relations_main_nav_first_level_second_level_third_level_locales
  relations_main_nav_first_level_second_level_third_level: typeof relations_main_nav_first_level_second_level_third_level
  relations_main_nav_first_level_second_level_locales: typeof relations_main_nav_first_level_second_level_locales
  relations_main_nav_first_level_second_level: typeof relations_main_nav_first_level_second_level
  relations_main_nav_first_level_locales: typeof relations_main_nav_first_level_locales
  relations_main_nav_first_level: typeof relations_main_nav_first_level
  relations_main_nav_rels: typeof relations_main_nav_rels
  relations_main_nav: typeof relations_main_nav
  relations_footer_nav_navigation_links: typeof relations_footer_nav_navigation_links
  relations_footer_nav: typeof relations_footer_nav
  relations_front_page_locales: typeof relations_front_page_locales
  relations_front_page: typeof relations_front_page
  relations_req_nav_first_level_second_level_third_level_locales: typeof relations_req_nav_first_level_second_level_third_level_locales
  relations_req_nav_first_level_second_level_third_level: typeof relations_req_nav_first_level_second_level_third_level
  relations_req_nav_first_level_second_level_locales: typeof relations_req_nav_first_level_second_level_locales
  relations_req_nav_first_level_second_level: typeof relations_req_nav_first_level_second_level
  relations_req_nav_first_level_locales: typeof relations_req_nav_first_level_locales
  relations_req_nav_first_level: typeof relations_req_nav_first_level
  relations_req_nav_rels: typeof relations_req_nav_rels
  relations_req_nav: typeof relations_req_nav
  relations_req_footer_nav_navigation_links: typeof relations_req_footer_nav_navigation_links
  relations_req_footer_nav: typeof relations_req_footer_nav
  relations_menu_titles_locales: typeof relations_menu_titles_locales
  relations_menu_titles: typeof relations_menu_titles
  relations_not_found_locales: typeof relations_not_found_locales
  relations_not_found: typeof relations_not_found
  relations_req_front_page_locales: typeof relations_req_front_page_locales
  relations_req_front_page: typeof relations_req_front_page
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
